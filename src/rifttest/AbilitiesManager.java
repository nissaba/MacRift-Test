/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AbilitiesManager.java
 *
 * Created on Jan 6, 2010, 9:39:02 AM
 */
package rifttest;

import java.util.ArrayList;

/**
 *
 * @author Pascale
 */
public class AbilitiesManager extends javax.swing.JFrame {

    private final static int SPELL = 0;
    private final static int PSI = 1;
    int selectedAbility;
    AbilityHandler handler;

    /** Creates new form AbilitiesManager */
    public AbilitiesManager() {
        initComponents();
        handler = new AbilityHandler();
        handler.loadXMLFile("c:\\test\\Abilities.xml");
        ArrayList l = handler.getMageSphere();
        list1.setListData(l.toArray());
        selectedAbility = SPELL;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        list1PopupMenu = new javax.swing.JPopupMenu();
        newMainSection = new javax.swing.JMenuItem();
        editMainSection = new javax.swing.JMenuItem();
        deleteMainSection = new javax.swing.JMenuItem();
        list2PopupMenu = new javax.swing.JPopupMenu();
        newAbility = new javax.swing.JMenuItem();
        editAbility = new javax.swing.JMenuItem();
        deleteAbility = new javax.swing.JMenuItem();
        list3PopupMenu = new javax.swing.JPopupMenu();
        newLevel = new javax.swing.JMenuItem();
        editLevel = new javax.swing.JMenuItem();
        deleteLevel = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        list1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        list2 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        list3 = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        list1PopupMenu.setName("list1PopupMenu"); // NOI18N

        newMainSection.setText("New");
        newMainSection.setName("newMainSection"); // NOI18N
        newMainSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMainSectionActionPerformed(evt);
            }
        });
        list1PopupMenu.add(newMainSection);

        editMainSection.setText("Edit");
        editMainSection.setName("editMainSection"); // NOI18N
        editMainSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMainSectionActionPerformed(evt);
            }
        });
        list1PopupMenu.add(editMainSection);

        deleteMainSection.setText("Delete");
        deleteMainSection.setName("deleteMainSection"); // NOI18N
        deleteMainSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMainSectionActionPerformed(evt);
            }
        });
        list1PopupMenu.add(deleteMainSection);

        list2PopupMenu.setName("list2PopupMenu"); // NOI18N

        newAbility.setText("New");
        newAbility.setName("newAbility"); // NOI18N
        newAbility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAbilityActionPerformed(evt);
            }
        });
        list2PopupMenu.add(newAbility);

        editAbility.setText("Edit");
        editAbility.setName("editAbility"); // NOI18N
        editAbility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAbilityActionPerformed(evt);
            }
        });
        list2PopupMenu.add(editAbility);

        deleteAbility.setText("Delete");
        deleteAbility.setName("deleteAbility"); // NOI18N
        deleteAbility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAbilityActionPerformed(evt);
            }
        });
        list2PopupMenu.add(deleteAbility);

        list3PopupMenu.setName("list3PopupMenu"); // NOI18N

        newLevel.setText("New");
        newLevel.setName("newLevel"); // NOI18N
        newLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLevelActionPerformed(evt);
            }
        });
        list3PopupMenu.add(newLevel);

        editLevel.setText("Edit");
        editLevel.setName("editLevel"); // NOI18N
        editLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLevelActionPerformed(evt);
            }
        });
        list3PopupMenu.add(editLevel);

        deleteLevel.setText("Delete");
        deleteLevel.setName("deleteLevel"); // NOI18N
        deleteLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLevelActionPerformed(evt);
            }
        });
        list3PopupMenu.add(deleteLevel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        list1.setComponentPopupMenu(list1PopupMenu);
        list1.setName("list1"); // NOI18N
        list1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        list2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list2.setComponentPopupMenu(list2PopupMenu);
        list2.setName("list2"); // NOI18N
        jScrollPane2.setViewportView(list2);

        jLabel1.setText("Right click Lists for options");
        jLabel1.setName("jLabel1"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Spells", "Psionics" }));
        jComboBox1.setEditor(null);
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        list3.setComponentPopupMenu(list3PopupMenu);
        list3.setName("list3"); // NOI18N
        list3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(list3);

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("File");
        jMenu1.setName("jMenu1"); // NOI18N

        saveMenuItem.setText("Save to File");
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void list1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list1MouseClicked
        // TODO add your handling code here:
        if (selectedAbility == SPELL) {
            list3.setListData(handler.getSpellLevels(list1.getSelectedIndex()).toArray());
        } else {
            list3.setListData(handler.getPsionicCategories(list1.getSelectedIndex()).toArray());
        }
    }//GEN-LAST:event_list1MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String selection = (String) jComboBox1.getSelectedItem();
        if (selection.equalsIgnoreCase("Spells")) {
            ArrayList l = handler.getMageSphere();
            list1.setListData(l.toArray());
            selectedAbility = SPELL;
        } else if (selection.equalsIgnoreCase("Psionics")) {
            ArrayList l = handler.getPsiSphere();
            list1.setListData(l.toArray());
            selectedAbility = PSI;
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void newMainSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMainSectionActionPerformed
        // TODO add your handling code here:
        if (SPELL == selectedAbility) {
            InputBox wnd = new InputBox(this, true, "Enter Level");
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.createMainSection(wnd.getReturnValue(), SPELL);
                list1.setListData(handler.getMageSphere().toArray());
            }
        } else if (selectedAbility == PSI) {
            InputBox wnd = new InputBox(this, true, "Enter Category");
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.createMainSection(wnd.getReturnValue(), PSI);
                list1.setListData(handler.getPsiSphere().toArray());
            }
        }
    }//GEN-LAST:event_newMainSectionActionPerformed

    private void deleteMainSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMainSectionActionPerformed
        // TODO add your handling code here:
        if (selectedAbility == SPELL) {
            handler.removeSpellSphere(list1.getSelectedIndex());
            list1.setListData(handler.getMageSphere().toArray());
        } else if (selectedAbility == PSI) {
            handler.removePsiSphere(list1.getSelectedIndex());
            list1.setListData(handler.getPsiSphere().toArray());
        }
        list1.setSelectedIndex(list1.getComponentCount()-1);
        this.list1MouseClicked(null);
    }//GEN-LAST:event_deleteMainSectionActionPerformed

    private void editMainSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMainSectionActionPerformed
        // TODO add your handling code here:
        if (selectedAbility == SPELL) {
            ArrayList nameList = handler.getMageSphere();
            String name = (String) nameList.get(list1.getSelectedIndex());
            InputBox wnd = new InputBox(this, true, "Enter New level");
            wnd.setTextBox(name);
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.setSpellSphereName(wnd.getReturnValue(), list1.getSelectedIndex());
            }
            list1.setListData(handler.getMageSphere().toArray());
        } else if (selectedAbility == PSI) {
            ArrayList nameList = handler.getPsiSphere();
            String name = (String) nameList.get(list1.getSelectedIndex());
            InputBox wnd = new InputBox(this, true, "Enter New name");
            wnd.setTextBox(name);
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.setPsiSphereName(wnd.getReturnValue(), list1.getSelectedIndex());
            }
            list1.setListData(handler.getPsiSphere().toArray());
        }
    }//GEN-LAST:event_editMainSectionActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        handler.saveData("c:\\test\\Abilities.xml");
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void newAbilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAbilityActionPerformed
        
        AbilityView wnd = new AbilityView(this, true);
        if (selectedAbility == SPELL) {
            wnd.setData(null, SPELL);
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == AbilityView.RET_OK) {
                handler.appendSpell(list1.getSelectedIndex(),
                        list3.getSelectedIndex(), wnd.getData());
            }
        } else if (selectedAbility == PSI) {
            wnd.setData(null, PSI);
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == AbilityView.RET_OK) {
                handler.appendPsionic(list1.getSelectedIndex(),
                        list3.getSelectedIndex(), wnd.getData());
            }
        }
        this.list3MouseClicked(null);
    }//GEN-LAST:event_newAbilityActionPerformed

    private void editAbilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAbilityActionPerformed
        AbilityView wnd = new AbilityView(this, true);
        if (selectedAbility == SPELL) {
            ArrayList list = handler.getSpellInfo(list1.getSelectedIndex(),
                    list3.getSelectedIndex(), list2.getSelectedIndex());
            wnd.setData(list, SPELL);
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == AbilityView.RET_OK) {
                handler.updateSpell(list1.getSelectedIndex(),
                        list3.getSelectedIndex(), list2.getSelectedIndex(), wnd.getData());
            }
        } else if (selectedAbility == PSI) {
            wnd.setData(null, PSI);
            ArrayList list = handler.getPsionicInfo(list1.getSelectedIndex(),
                    list3.getSelectedIndex(),list2.getSelectedIndex());
            wnd.setData(list, PSI);
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == AbilityView.RET_OK) {
                handler.updatePsionicNode(list1.getSelectedIndex(),
                        list3.getSelectedIndex(),list2.getSelectedIndex(), wnd.getData());
            }
        }
        this.list3MouseClicked(null);
    }//GEN-LAST:event_editAbilityActionPerformed

    private void deleteAbilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAbilityActionPerformed
        if (selectedAbility == SPELL) {
            handler.removeSpellNode(list1.getSelectedIndex(),
                    list3.getSelectedIndex(), list2.getSelectedIndex());
        } else if (selectedAbility == PSI) {
            handler.removePsionicNode(list1.getSelectedIndex(),
                    list3.getSelectedIndex(),list2.getSelectedIndex());
        }
       this.list3MouseClicked(null);
    }//GEN-LAST:event_deleteAbilityActionPerformed

    private void list3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list3MouseClicked
        if (selectedAbility == SPELL) {
            list2.setListData(handler.getSpells(list1.getSelectedIndex(),
                    list3.getSelectedIndex()).toArray());
        } else {
            list2.setListData(handler.getPsionics(list1.getSelectedIndex(),
                    list3.getSelectedIndex()).toArray());
        }
    }//GEN-LAST:event_list3MouseClicked

    private void newLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLevelActionPerformed
        // new level or psi category
        if (selectedAbility == SPELL) {
            InputBox wnd = new InputBox(this, true, "Enter Level");
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.createNewSpellLevel(wnd.getReturnValue(), list1.getSelectedIndex());
               
            }
        } else {
            InputBox wnd = new InputBox(this, true, "Enter Category name");
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.createNewPsiCategory(wnd.getReturnValue(), list1.getSelectedIndex());

            }
        }
         this.list1MouseClicked(null);
    }//GEN-LAST:event_newLevelActionPerformed

    private void deleteLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLevelActionPerformed
         if (selectedAbility == SPELL) {
            handler.removeSpellLevel(list1.getSelectedIndex(),list3.getSelectedIndex());
            
        } else if (selectedAbility == PSI) {
            handler.removePsiCategory(list1.getSelectedIndex(),list3.getSelectedIndex());
            
        }
         this.list1MouseClicked(null);
         list3.setSelectedIndex(list3.getComponentCount()-1);
         this.list3MouseClicked(null);
    }//GEN-LAST:event_deleteLevelActionPerformed

    private void editLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLevelActionPerformed
         if (selectedAbility == SPELL) {
            InputBox wnd = new InputBox(this, true, "Enter Level");
            ArrayList l = handler.getSpellLevels(list1.getSelectedIndex());
            wnd.setTextBox((String) l.get(list3.getSelectedIndex()));
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.setSpellLevel(wnd.getReturnValue(),
                        list1.getSelectedIndex(), list3.getSelectedIndex());

            }
        } else {
            InputBox wnd = new InputBox(this, true, "Enter Category name");
            ArrayList l = handler.getPsionicCategories(list1.getSelectedIndex());
            wnd.setTextBox((String) l.get(list3.getSelectedIndex()));
            wnd.setLocationRelativeTo(this);
            wnd.setVisible(true);
            if (wnd.getReturnStatus() == InputBox.RET_OK) {
                handler.setPsionicCategory(wnd.getReturnValue(),
                        list1.getSelectedIndex(),list3.getSelectedIndex());

            }
        }
         this.list1MouseClicked(null);
    }//GEN-LAST:event_editLevelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AbilitiesManager().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteAbility;
    private javax.swing.JMenuItem deleteLevel;
    private javax.swing.JMenuItem deleteMainSection;
    private javax.swing.JMenuItem editAbility;
    private javax.swing.JMenuItem editLevel;
    private javax.swing.JMenuItem editMainSection;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList list1;
    private javax.swing.JPopupMenu list1PopupMenu;
    private javax.swing.JList list2;
    private javax.swing.JPopupMenu list2PopupMenu;
    private javax.swing.JList list3;
    private javax.swing.JPopupMenu list3PopupMenu;
    private javax.swing.JMenuItem newAbility;
    private javax.swing.JMenuItem newLevel;
    private javax.swing.JMenuItem newMainSection;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
