/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EquipmentManager.java
 *
 * Created on Jan 6, 2010, 9:26:43 AM
 */
package rifttest;

import java.util.ArrayList;

/**
 *
 * @author Pascale
 */
public class EquipmentManager extends javax.swing.JFrame {

    EquipmentHandler handler;

    /** Creates new form EquipmentManager */
    public EquipmentManager() {
        initComponents();
        handler = new EquipmentHandler();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        button2 = new java.awt.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        sectionList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        equipmentList = new javax.swing.JList();
        button1 = new java.awt.Button();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label1.setName("label1"); // NOI18N
        label1.setText("Equipement section");

        label2.setName("label2"); // NOI18N
        label2.setText("Equipment");

        button2.setLabel("New Equipment");
        button2.setName("New Equipment"); // NOI18N
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        sectionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Weapons", "Body Armor", "Power Armor", "Vehicules", "Robot Vehicules", " ", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        sectionList.setName("sectionList"); // NOI18N
        sectionList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sectionListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sectionList);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        equipmentList.setName("equipmentList"); // NOI18N
        equipmentList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                equipmentListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(equipmentList);

        button1.setLabel("Edit");
        button1.setName("button1"); // NOI18N
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");

        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void sectionListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sectionListMouseClicked
        // TODO add your handling code here:
        int index = sectionList.getSelectedIndex();
        switch (index) {
            case 0:
                equipmentList.setListData(handler.getEquipmentList(EquipmentHandler.WEAPONS).toArray());
                break;
            case 1:
                equipmentList.setListData(handler.getEquipmentList(EquipmentHandler.BODY_ARMOR).toArray());
                break;
            case 2:
                equipmentList.setListData(handler.getEquipmentList(EquipmentHandler.POWER_ARMOR).toArray());
                break;
            case 3:
                equipmentList.setListData(handler.getEquipmentList(EquipmentHandler.VEHICULES).toArray());
                break;
            case 4:
                equipmentList.setListData(handler.getEquipmentList(EquipmentHandler.ROBOT_VEHICULES).toArray());
                break;

        }
    }//GEN-LAST:event_sectionListMouseClicked

    private void equipmentListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_equipmentListMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_equipmentListMouseClicked

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        int wIndex = equipmentList.getSelectedIndex();
        ArrayList list = new ArrayList();

        switch (sectionList.getSelectedIndex()) {
            case 0:
                list = handler.getWeaponNodeData(EquipmentHandler.WEAPONS, wIndex);
                WeaponView wnd = new WeaponView(this, true);
                if (wnd != null) {
                    wnd.setData(list);
                    wnd.setVisible(true);
                    if (wnd.getReturnStatus() == WeaponView.RET_OK) {
                        handler.setWeaponData(EquipmentHandler.WEAPONS,
                                wIndex, wnd.getData());
                    }
                }
                sectionListMouseClicked(null);
                list = null;
                wnd.dispose();
                break;
            case 1:
                list = handler.getBodyArmorNodeData(wIndex);
                BodyArmorView wndA = new BodyArmorView(this, true);
                if (wndA != null) {
                    wndA.setData(list);
                    wndA.setVisible(true);
                    if (wndA.getReturnStatus() == BodyArmorView.RET_OK) {
                        handler.setBodyArmorData(wIndex, wndA.getData());
                    }
                }
                sectionListMouseClicked(null);
                list = null;
                wndA.dispose();
                break;
            case 2:
                list = handler.getPowerArmorNodeData(wIndex);
                PowerArmorView wndPA = new PowerArmorView(this, true);
                if (wndPA != null) {
                    wndPA.setData(list);
                    wndPA.setVisible(true);
                    if (wndPA.getReturnStatus() == PowerArmorView.RET_OK) {
                        handler.setPowerArmorData(wIndex, wndPA.getData());
                    }
                }
                sectionListMouseClicked(null);
                list = null;
                wndPA.dispose();
                break;
            case 3:
                list = handler.getVehiculeNodeData(wIndex);
                VehiculeView wndV = new VehiculeView(this, true);
                if (wndV != null) {
                    wndV.setData(list);
                    wndV.setVisible(true);
                    if (wndV.getReturnStatus() == VehiculeView.RET_OK) {
                        handler.setVehiculeData(wIndex, wndV.getData());
                    }
                }
                sectionListMouseClicked(null);
                list = null;
                wndV.dispose();
                break;
            case 4:
                list = handler.getRobotVehiculeNodeData(wIndex);
                RobotVehiculeView wndRV = new RobotVehiculeView(this, true);
                if (wndRV != null) {
                    wndRV.setData(list);
                    wndRV.setVisible(true);
                    if (wndRV.getReturnStatus() == RobotVehiculeView.RET_OK) {
                        handler.setRobotVehiculeArmorData(wIndex, wndRV.getData());
                    }
                }
                sectionListMouseClicked(null);
                list = null;
                wndRV.dispose();
                break;
        }




    }//GEN-LAST:event_button1ActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        handler.saveData("c:\\test\\equipment.xml");
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        handler.saveData("c:\\test\\equipment.xml");
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:
        switch (sectionList.getSelectedIndex()) {
            case 0:
                WeaponView wndW = new WeaponView(this, true);
                wndW.setData(null);
                wndW.setVisible(true);
                if (wndW.getReturnStatus() == WeaponView.RET_OK) {
                    ArrayList list = wndW.getData();
                    handler.addWeapon(list);
                    sectionListMouseClicked(null);
                }
                wndW.dispose();
                break;
            case 1:
                BodyArmorView wndBA = new BodyArmorView(this, true);
                wndBA.setData(null);
                wndBA.setVisible(true);
                if (wndBA.getReturnStatus() == BodyArmorView.RET_OK) {
                    ArrayList list = wndBA.getData();
                    handler.addBodyArmor(list);
                    sectionListMouseClicked(null);
                }
                wndBA.dispose();
                break;
            case 2:
                PowerArmorView wndPA = new PowerArmorView(this, true);
                wndPA.setData(null);
                wndPA.setVisible(true);
                if (wndPA.getReturnStatus() == PowerArmorView.RET_OK) {
                    ArrayList list = wndPA.getData();
                    handler.addPowerArmor(list);
                    sectionListMouseClicked(null);
                }
                wndPA.dispose();
                break;
            case 3:
                VehiculeView wndV = new VehiculeView(this, true);
                wndV.setData(null);
                wndV.setVisible(true);
                if (wndV.getReturnStatus() == VehiculeView.RET_OK) {
                    ArrayList list = wndV.getData();
                    handler.addVehicule(list);
                    sectionListMouseClicked(null);
                }
                wndV.dispose();
                break;
            case 4:
                RobotVehiculeView wndRV = new RobotVehiculeView(this, true);
                wndRV.setData(null);
                wndRV.setVisible(true);
                if (wndRV.getReturnStatus() == RobotVehiculeView.RET_OK) {
                    ArrayList list = wndRV.getData();
                    handler.addRobotVehicule(list);
                    sectionListMouseClicked(null);
                }
                wndRV.dispose();
                break;
        }
    }//GEN-LAST:event_button2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EquipmentManager().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private java.awt.Button button1;
    private java.awt.Button button2;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JList equipmentList;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JList sectionList;
    // End of variables declaration//GEN-END:variables
}
