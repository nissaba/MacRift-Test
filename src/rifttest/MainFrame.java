/*
 * SkillManager.java
 */
package rifttest;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;


/**
 * The application's main frame.
 */
/**
 *
 * @author Pascale
 */
public class MainFrame extends FrameView {

    SingleFrameApplication app;
    Image image;
    

    public MainFrame(SingleFrameApplication app) {
        super(app);
        this.app = app;
        initComponents();
        image = Toolkit.getDefaultToolkit().getImage("images/rift.png");
       
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });

    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = RiftTestApp.getApplication().getMainFrame();
            aboutBox = new RiftTestAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        RiftTestApp.getApplication().show(aboutBox);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        SkillMenuItem = new javax.swing.JMenuItem();
        EquipmentMenuItem = new javax.swing.JMenuItem();
        AbilitiesMenuItem = new javax.swing.JMenuItem();
        ORCCMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(MainFrame.class);
        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        FileMenu.setText(resourceMap.getString("FileMenu.text")); // NOI18N
        FileMenu.setName("FileMenu"); // NOI18N

        SkillMenuItem.setText(resourceMap.getString("SkillMenuItem.text")); // NOI18N
        SkillMenuItem.setName("SkillMenuItem"); // NOI18N
        SkillMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkillMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SkillMenuItem);

        EquipmentMenuItem.setText(resourceMap.getString("EquipmentMenuItem.text")); // NOI18N
        EquipmentMenuItem.setName("EquipmentMenuItem"); // NOI18N
        EquipmentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EquipmentMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(EquipmentMenuItem);

        AbilitiesMenuItem.setText(resourceMap.getString("AbilitiesMenuItem.text")); // NOI18N
        AbilitiesMenuItem.setName("AbilitiesMenuItem"); // NOI18N
        AbilitiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbilitiesMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(AbilitiesMenuItem);

        ORCCMenuItem.setText(resourceMap.getString("ORCCMenuItem.text")); // NOI18N
        ORCCMenuItem.setName("ORCCMenuItem"); // NOI18N
        ORCCMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ORCCMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ORCCMenuItem);

        menuBar.add(FileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 314, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents
/*
    public void paint(Graphics g) {

    JRootPane jp = this.getRootPane();
    Dimension d = jp.getSize();
    Insets in = jp.getInsets();
    g.translate(in.left, in.top);
    int clientWidth = d.width - in.right - in.left;
    int clientHeight = d.height - in.bottom - in.top;
    int imageWidth = image.getWidth(jp);
    int imageHeight = image.getHeight(jp);

    g.drawImage(image, 0, 0, clientWidth, clientHeight, (ImageObserver) jp);
    for (int i = 0; i <= clientWidth / imageWidth; i++) {
    for (int j = 0; j <= clientHeight / imageHeight; j++) {
    if (i + j > 0) {
    g.copyArea(0, 0, imageWidth, imageHeight, i * imageWidth, j * imageHeight);
    }
    }
    }

    }*/
    private void SkillMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkillMenuItemActionPerformed
        // TODO add your handling code here:
        app.show(new SkillManager(app));

    }//GEN-LAST:event_SkillMenuItemActionPerformed

    private void EquipmentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EquipmentMenuItemActionPerformed
        // TODO add your handling code here:
        EquipmentManager equipmentManager = new EquipmentManager();
        JFrame mainFrame = RiftTestApp.getApplication().getMainFrame();
        equipmentManager.setLocationRelativeTo(mainFrame);
        equipmentManager.setVisible(true);
    }//GEN-LAST:event_EquipmentMenuItemActionPerformed

    private void AbilitiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbilitiesMenuItemActionPerformed
        // TODO add your handling code here:
        AbilitiesManager wnd = new AbilitiesManager();
        JFrame mainFrame = RiftTestApp.getApplication().getMainFrame();
        wnd.setLocationRelativeTo(mainFrame);
        wnd.setVisible(true);
    }//GEN-LAST:event_AbilitiesMenuItemActionPerformed

    private void ORCCMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ORCCMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ORCCMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
           showAboutBox();

    }//GEN-LAST:event_aboutMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbilitiesMenuItem;
    private javax.swing.JMenuItem EquipmentMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem ORCCMenuItem;
    private javax.swing.JMenuItem SkillMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}
