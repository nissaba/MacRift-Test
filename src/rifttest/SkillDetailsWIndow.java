/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SkillDetailsWIndow.java
 *
 * Created on Jan 1, 2010, 6:29:56 PM
 */
/**
 *
 * @author Pascale
 */
package rifttest;

import java.util.ArrayList;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import rifttest.resources.skillParticuleWND;

/**
 *
 * @author Pascale
 */
public class SkillDetailsWIndow extends javax.swing.JFrame {

    private SkillHandler handler;
    private Element category;

    /** Creates new form SkillDetailsWIndow */
    public SkillDetailsWIndow() {
        initComponents();
        handler = new SkillHandler();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        label3 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        nameBox = new java.awt.TextField();
        descriptionBox = new java.awt.TextArea();
        bnsListBox = new java.awt.List();
        abilityList = new java.awt.List();
        awards = new java.awt.List();
        label2 = new java.awt.Label();
        label4 = new java.awt.Label();
        restricList = new java.awt.List();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        newSkillMenuItem = new javax.swing.JMenuItem();
        remSkillMenuItem = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        remAbilityMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        newBonusMenuItem = new javax.swing.JMenuItem();
        remBonusMenuItem = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        newRestrictionMenuItem = new javax.swing.JMenuItem();
        remRestrictionMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(rifttest.RiftTestApp.class).getContext().getResourceMap(SkillDetailsWIndow.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        label1.setName("label1"); // NOI18N
        label1.setText(resourceMap.getString("label1.text")); // NOI18N

        label3.setName("label3"); // NOI18N
        label3.setText(resourceMap.getString("label3.text")); // NOI18N

        label6.setName("label6"); // NOI18N
        label6.setText(resourceMap.getString("label6.text")); // NOI18N

        label7.setName("label7"); // NOI18N
        label7.setText(resourceMap.getString("label7.text")); // NOI18N

        nameBox.setName("nameBox"); // NOI18N
        nameBox.setText(resourceMap.getString("nameBox.text")); // NOI18N

        descriptionBox.setName("descriptionBox"); // NOI18N

        bnsListBox.setName("bnsListBox"); // NOI18N
        bnsListBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bnsListBoxItemStateChanged(evt);
            }
        });
        bnsListBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnsListBoxActionPerformed(evt);
            }
        });

        abilityList.setName("abilityList"); // NOI18N
        abilityList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                abilityListItemStateChanged(evt);
            }
        });
        abilityList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abilityListActionPerformed(evt);
            }
        });

        awards.setName("awards"); // NOI18N
        awards.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                awardsItemStateChanged(evt);
            }
        });
        awards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                awardsActionPerformed(evt);
            }
        });

        label2.setName("label2"); // NOI18N
        label2.setText(resourceMap.getString("label2.text")); // NOI18N

        label4.setName("label4"); // NOI18N
        label4.setText(resourceMap.getString("label4.text")); // NOI18N

        restricList.setName("restricList"); // NOI18N
        restricList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                restricListItemStateChanged(evt);
            }
        });
        restricList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restricListActionPerformed(evt);
            }
        });

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenu4.setText(resourceMap.getString("jMenu4.text")); // NOI18N
        jMenu4.setName("jMenu4"); // NOI18N

        newSkillMenuItem.setText(resourceMap.getString("newSkillMenuItem.text")); // NOI18N
        newSkillMenuItem.setName("newSkillMenuItem"); // NOI18N
        newSkillMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSkillMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(newSkillMenuItem);

        remSkillMenuItem.setText(resourceMap.getString("remSkillMenuItem.text")); // NOI18N
        remSkillMenuItem.setEnabled(false);
        remSkillMenuItem.setName("remSkillMenuItem"); // NOI18N
        remSkillMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remSkillMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(remSkillMenuItem);

        jMenu1.add(jMenu4);

        jMenu5.setText(resourceMap.getString("jMenu5.text")); // NOI18N
        jMenu5.setName("jMenu5"); // NOI18N

        jMenuItem7.setText(resourceMap.getString("jMenuItem7.text")); // NOI18N
        jMenuItem7.setName("jMenuItem7"); // NOI18N
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem7);

        remAbilityMenuItem.setText(resourceMap.getString("remAbilityMenuItem.text")); // NOI18N
        remAbilityMenuItem.setEnabled(false);
        remAbilityMenuItem.setName("remAbilityMenuItem"); // NOI18N
        remAbilityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remAbilityMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(remAbilityMenuItem);

        jMenu1.add(jMenu5);

        jMenu3.setText(resourceMap.getString("jMenu3.text")); // NOI18N
        jMenu3.setName("jMenu3"); // NOI18N

        newBonusMenuItem.setText(resourceMap.getString("newBonusMenuItem.text")); // NOI18N
        newBonusMenuItem.setName("newBonusMenuItem"); // NOI18N
        newBonusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBonusMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(newBonusMenuItem);

        remBonusMenuItem.setText(resourceMap.getString("remBonusMenuItem.text")); // NOI18N
        remBonusMenuItem.setEnabled(false);
        remBonusMenuItem.setName("remBonusMenuItem"); // NOI18N
        remBonusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remBonusMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(remBonusMenuItem);

        jMenu1.add(jMenu3);

        jMenu6.setText(resourceMap.getString("jMenu6.text")); // NOI18N
        jMenu6.setName("jMenu6"); // NOI18N

        newRestrictionMenuItem.setText(resourceMap.getString("newRestrictionMenuItem.text")); // NOI18N
        newRestrictionMenuItem.setName("newRestrictionMenuItem"); // NOI18N
        newRestrictionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRestrictionMenuItemActionPerformed(evt);
            }
        });
        jMenu6.add(newRestrictionMenuItem);

        remRestrictionMenuItem.setText(resourceMap.getString("remRestrictionMenuItem.text")); // NOI18N
        remRestrictionMenuItem.setEnabled(false);
        remRestrictionMenuItem.setName("remRestrictionMenuItem"); // NOI18N
        remRestrictionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remRestrictionMenuItemActionPerformed(evt);
            }
        });
        jMenu6.add(remRestrictionMenuItem);

        jMenu1.add(jMenu6);

        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(nameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(descriptionBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(awards, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(abilityList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bnsListBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(restricList, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriptionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(awards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(abilityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(restricList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bnsListBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void awardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_awardsActionPerformed
        // TODO add your handling code here:
        skillParticuleWND wnd = new skillParticuleWND(this, true);
        Element Elem = (Element) skillcopy.getElementsByTagName("Award").item(awards.getSelectedIndex());
        wnd.setData(Elem, skillParticuleWND.AWARD, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            Elem = wnd.retElement();
            awards.removeAll();
            this.loadAwards();
        }
    }//GEN-LAST:event_awardsActionPerformed

    private void abilityListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abilityListActionPerformed
        // TODO add your handling code here:
        skillParticuleWND wnd = new skillParticuleWND(this, true);
        Element Elem = (Element) skillcopy.getElementsByTagName("Ability").item(abilityList.getSelectedIndex());
        wnd.setData(Elem, skillParticuleWND.ABILITY, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            Elem = wnd.retElement();
            abilityList.removeAll();
            this.loadAbilities();
        }
    }//GEN-LAST:event_abilityListActionPerformed

    private void bnsListBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnsListBoxActionPerformed
        // TODO add your handling code here:
        skillParticuleWND wnd = new skillParticuleWND(this, true);
        Element Elem = (Element) skillcopy.getElementsByTagName("Bonus").item(bnsListBox.getSelectedIndex());
        wnd.setData(Elem, skillParticuleWND.BONUS, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            Elem = wnd.retElement();
            bnsListBox.removeAll();
            this.loadBonus();
        }
    }//GEN-LAST:event_bnsListBoxActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:

        skillElement.setAttribute("name", nameBox.getText());
        NodeList nodes = skillElement.getElementsByTagName("Description");
        Element E = (Element) nodes.item(0);

        if (E != null) {
            Text txt = (Text) E.getFirstChild();
            txt.setNodeValue(descriptionBox.getText());
        }

        updateNode("Award");
        updateNode("Bonus");
        updateNode("Ability");
        updateNode("Restriction");
        //handler.updateNode(category, skillElement, skillcopy);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void restricListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restricListActionPerformed
        // TODO add your handling code here:
        skillParticuleWND wnd = new skillParticuleWND(this, true);
        Element Elem = (Element) skillcopy.getElementsByTagName("Restriction").item(restricList.getSelectedIndex());
        wnd.setData(Elem, skillParticuleWND.RESTRICTION, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            Elem = wnd.retElement();
            restricList.removeAll();
            this.loadRestrictions();
        }
    }//GEN-LAST:event_restricListActionPerformed

    private void newSkillMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSkillMenuItemActionPerformed

        Element e = handler.createElement("Award");

        skillParticuleWND wnd = new skillParticuleWND(this, true);
        wnd.setData(e, skillParticuleWND.AWARD, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            e = wnd.retElement();
            skillcopy.appendChild((Node) e);
            awards.removeAll();
            this.loadAwards();
        }
    }//GEN-LAST:event_newSkillMenuItemActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        Element e = handler.createElement("Ability");

        skillParticuleWND wnd = new skillParticuleWND(this, true);
        wnd.setData(e, skillParticuleWND.ABILITY, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            e = wnd.retElement();
            skillcopy.appendChild((Node) e);
            abilityList.add(e.getAttribute("name"));
            abilityList.select(abilityList.getItemCount() - 1);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void newBonusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBonusMenuItemActionPerformed
        // TODO add your handling code here:
        Element e = handler.createElement("Bonus");

        skillParticuleWND wnd = new skillParticuleWND(this, true);
        wnd.setData(e, skillParticuleWND.BONUS, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            // e = wnd.retElement();
            skillcopy.appendChild((Node) e);
            bnsListBox.removeAll();
            this.loadBonus();
        }
    }//GEN-LAST:event_newBonusMenuItemActionPerformed

    private void newRestrictionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRestrictionMenuItemActionPerformed
        // TODO add your handling code here:
        Element e = handler.createElement("Restriction");

        skillParticuleWND wnd = new skillParticuleWND(this, true);
        wnd.setData(e, skillParticuleWND.RESTRICTION, handler);
        wnd.setVisible(true);
        if (wnd.getReturnStatus() == skillParticuleWND.RET_OK) {
            e = wnd.retElement();
            skillcopy.appendChild((Node) e);
            restricList.removeAll();
            this.loadRestrictions();
        }
    }//GEN-LAST:event_newRestrictionMenuItemActionPerformed

    private void remSkillMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remSkillMenuItemActionPerformed
        // TODO add your handling code here:
        handler.removeNode("Award", skillcopy, awards.getSelectedIndex());
        awards.removeAll();
        this.loadAwards();
        awardsItemStateChanged(null);
    }//GEN-LAST:event_remSkillMenuItemActionPerformed

    private void remAbilityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remAbilityMenuItemActionPerformed
        // TODO add your handling code here:
        handler.removeNode("Ability", skillcopy, abilityList.getSelectedIndex());
        abilityList.removeAll();
        this.loadAbilities();
        abilityListItemStateChanged(null);
    }//GEN-LAST:event_remAbilityMenuItemActionPerformed

    private void remBonusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remBonusMenuItemActionPerformed
        // TODO add your handling code here:
        handler.removeNode("Bonus", skillcopy, bnsListBox.getSelectedIndex());
        bnsListBox.removeAll();
        this.loadBonus();
        bnsListBoxItemStateChanged(null);
    }//GEN-LAST:event_remBonusMenuItemActionPerformed

    private void remRestrictionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remRestrictionMenuItemActionPerformed
        // TODO add your handling code here:
        handler.removeNode("Restriction", skillcopy, restricList.getSelectedIndex());
        restricList.removeAll();
        this.loadRestrictions();
        restricListItemStateChanged(null);
    }//GEN-LAST:event_remRestrictionMenuItemActionPerformed

    private void awardsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_awardsItemStateChanged
        // TODO add your handling code here:
        if(awards.getSelectedIndex() >= 0)
            remSkillMenuItem.setEnabled(true);
        else
            remSkillMenuItem.setEnabled(false);
    }//GEN-LAST:event_awardsItemStateChanged

    private void abilityListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_abilityListItemStateChanged
        // TODO add your handling code here:
        if(abilityList.getSelectedIndex() >= 0)
            remAbilityMenuItem.setEnabled(true);
        else
            remAbilityMenuItem.setEnabled(false);
    }//GEN-LAST:event_abilityListItemStateChanged

    private void bnsListBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bnsListBoxItemStateChanged
        // TODO add your handling code here:
        if(bnsListBox.getSelectedIndex() >= 0)
            remBonusMenuItem.setEnabled(true);
        else
            remBonusMenuItem.setEnabled(false);
    }//GEN-LAST:event_bnsListBoxItemStateChanged

    private void restricListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_restricListItemStateChanged
        // TODO add your handling code here:
        if(restricList.getSelectedIndex() >= 0)
            remRestrictionMenuItem.setEnabled(true);
        else
            remRestrictionMenuItem.setEnabled(false);
    }//GEN-LAST:event_restricListItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SkillDetailsWIndow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.List abilityList;
    private java.awt.List awards;
    private java.awt.List bnsListBox;
    private java.awt.TextArea descriptionBox;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem7;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.TextField nameBox;
    private javax.swing.JMenuItem newBonusMenuItem;
    private javax.swing.JMenuItem newRestrictionMenuItem;
    private javax.swing.JMenuItem newSkillMenuItem;
    private javax.swing.JMenuItem remAbilityMenuItem;
    private javax.swing.JMenuItem remBonusMenuItem;
    private javax.swing.JMenuItem remRestrictionMenuItem;
    private javax.swing.JMenuItem remSkillMenuItem;
    private java.awt.List restricList;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    private Element skillElement;
    private Element skillcopy;

    void setSkillElement(SkillHandler H, Element parent, Element element) {
        handler = H;
        category = parent;
        skillElement = element;
        skillcopy = (Element) skillElement.cloneNode(true);
        if (skillcopy == null) {
            System.exit(0);
        }

        nameBox.setText(getSkillName());
        descriptionBox.setText(getElementData("Description"));
        ArrayList list = null;

        loadAwards();

        loadAbilities();

        loadBonus();

        loadRestrictions();

    }

    private String getSkillName() {
        return skillcopy.getAttribute("name");
    }

    private String getElementData(String name) {
        Text txt = null;
        NodeList nodes = skillcopy.getElementsByTagName(name);
        Element baseElement = (Element) nodes.item(0);
        if (baseElement != null) {
            txt = (Text) baseElement.getFirstChild();
            return txt.getNodeValue();
        }
        return null;
    }

    private ArrayList getAttrList(String name, String attr) {
        ArrayList bonusList = new ArrayList();

        NodeList nodes = skillcopy.getElementsByTagName(name);
        for (int i = 0; i < nodes.getLength(); i++) {
            String str = null;
            Element bonusElement = (Element) nodes.item(i);
            str = bonusElement.getAttribute(attr);
            bonusList.add(str);
        }

        return bonusList;
    }

    public void updateNode(String name) {
        //handler.updateNode(category, skillcopy, skillElement);

        NodeList nodesCopy;
        NodeList nodesOrigin;

        nodesCopy = skillcopy.getElementsByTagName(name);
        nodesOrigin = skillElement.getElementsByTagName(name);
        while(nodesOrigin.getLength()>0){
            skillElement.removeChild(nodesOrigin.item(0));
        }
        while(nodesCopy.getLength()>0){
            skillElement.appendChild(nodesCopy.item(0));
        }

    }

    private void loadAwards() {
        ArrayList list = getAttrList("Award", "name");

        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                awards.add((String) list.get(i));
            }
        }
    }

    private void loadAbilities() {
        ArrayList list = getAttrList("Ability", "name");

        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                abilityList.add((String) list.get(i));
            }
        }
    }

    private void loadBonus() {
        ArrayList list = getAttrList("Bonus", "target");
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                bnsListBox.add((String) list.get(i));
            }
        }
    }

    private void loadRestrictions() {
        ArrayList list = getAttrList("Restriction", "name");
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                restricList.add((String) list.get(i));
            }
        }
    }
}
